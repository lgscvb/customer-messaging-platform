version: '3.8'

services:
  # 後端服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: customer-messaging-backend:latest
    container_name: customer-messaging-backend
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-customer_messaging}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
      - JWT_EXPIRES_IN=1d
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_PAGE_ACCESS_TOKEN=${FACEBOOK_PAGE_ACCESS_TOKEN}
    ports:
      - "3001:3001"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - app-network

  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: customer-messaging-frontend:latest
    container_name: customer-messaging-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network

  # PostgreSQL 數據庫
  postgres:
    image: postgres:14-alpine
    container_name: customer-messaging-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-customer_messaging}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis 緩存
  redis:
    image: redis:alpine
    container_name: customer-messaging-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # 向量數據庫 (Milvus)
  milvus:
    image: milvusdb/milvus:latest
    container_name: customer-messaging-milvus
    restart: unless-stopped
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    ports:
      - "19530:19530"
      - "19121:19121"
    depends_on:
      - etcd
      - minio
    networks:
      - app-network

  # Milvus 依賴 - etcd
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: customer-messaging-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - etcd-data:/etcd
    command: etcd --advertise-client-urls=http://127.0.0.1:2379 --listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - app-network

  # Milvus 依賴 - MinIO
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: customer-messaging-minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio-data:/data
    command: minio server /data
    networks:
      - app-network

  # 監控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: customer-messaging-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network

  # 監控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: customer-messaging-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - app-network

# 持久化數據卷
volumes:
  postgres-data:
  redis-data:
  etcd-data:
  minio-data:
  prometheus-data:
  grafana-data:

# 網絡配置
networks:
  app-network:
    driver: bridge