name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境 (dev/prod)'
        required: true
        default: 'dev'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 代碼檢查
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 設置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安裝後端依賴
        working-directory: ./backend
        run: npm ci
      
      - name: 運行後端代碼檢查
        working-directory: ./backend
        run: npm run lint
      
      - name: 安裝前端依賴
        working-directory: ./frontend
        run: npm ci
      
      - name: 運行前端代碼檢查
        working-directory: ./frontend
        run: npm run lint

  # 後端測試和構建
  backend:
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      # 設置 PostgreSQL 服務
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customer_messaging_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # 設置 Redis 服務
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 設置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: 安裝後端依賴
        working-directory: ./backend
        run: npm ci
      
      - name: 修復 LangChain 依賴問題
        working-directory: ./backend
        run: |
          if [ -f ./scripts/fix-langchain-dependency.js ]; then
            node ./scripts/fix-langchain-dependency.js
          fi
      
      - name: 運行後端測試
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: customer_messaging_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test_jwt_secret_key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: 構建後端
        working-directory: ./backend
        run: npm run build
      
      - name: 上傳後端構建產物
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          retention-days: 1
  
  # 前端測試和構建
  frontend:
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 設置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安裝前端依賴
        working-directory: ./frontend
        run: npm ci
      
      - name: 運行前端測試
        working-directory: ./frontend
        run: npm test
      
      - name: 構建前端
        working-directory: ./frontend
        run: npm run build
      
      - name: 上傳前端構建產物
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 1
  
  # 構建 Docker 鏡像
  build-images:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 下載後端構建產物
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist
      
      - name: 下載前端構建產物
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
      
      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 登錄到 Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: 設置環境變量
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "ENV_TAG=latest" >> $GITHUB_OUTPUT
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_TAG=dev" >> $GITHUB_OUTPUT
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: 構建並推送後端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:${{ steps.vars.outputs.ENV_TAG }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: 構建並推送前端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:${{ steps.vars.outputs.ENV_TAG }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
  
  # 部署到開發環境
  deploy-dev:
    needs: build-images
    if: (github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    
    steps:
      - name: 部署到開發環境
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            mkdir -p /opt/customer-messaging-platform
            cd /opt/customer-messaging-platform
            
            # 備份當前環境變量文件
            if [ -f .env.dev ]; then
              cp .env.dev .env.dev.backup
            fi
            
            # 創建或更新環境變量文件
            echo "${{ secrets.DEV_ENV_FILE }}" > .env.dev
            
            # 創建 docker-compose 文件
            cat > docker-compose.yml << EOF
            version: '3.8'
            
            services:
              backend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:${{ github.sha }}
                restart: unless-stopped
                env_file: .env.dev
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
              
              frontend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:${{ github.sha }}
                restart: unless-stopped
                depends_on:
                  - backend
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
            EOF
            
            # 拉取新鏡像並重啟服務
            docker-compose pull
            docker-compose up -d
            
            # 清理舊鏡像
            docker system prune -af --filter "until=24h"
      
      - name: 驗證部署
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            cd /opt/customer-messaging-platform
            
            # 等待服務啟動
            echo "等待服務啟動..."
            sleep 30
            
            # 檢查服務狀態
            echo "檢查服務狀態..."
            docker-compose ps
            
            # 檢查健康狀態
            echo "檢查健康狀態..."
            BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health)
            FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health)
            
            if [ "$BACKEND_HEALTH" == "200" ] && [ "$FRONTEND_HEALTH" == "200" ]; then
              echo "部署成功！所有服務運行正常。"
              exit 0
            else
              echo "部署失敗！健康檢查未通過。"
              echo "後端健康狀態: $BACKEND_HEALTH"
              echo "前端健康狀態: $FRONTEND_HEALTH"
              exit 1
            fi
  
  # 部署到生產環境
  deploy-prod:
    needs: build-images
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    runs-on: ubuntu-latest
    
    steps:
      - name: 部署到生產環境
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            mkdir -p /opt/customer-messaging-platform
            cd /opt/customer-messaging-platform
            
            # 備份當前環境變量文件
            if [ -f .env.prod ]; then
              cp .env.prod .env.prod.backup
            fi
            
            # 創建或更新環境變量文件
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            
            # 創建 docker-compose 文件
            cat > docker-compose.yml << EOF
            version: '3.8'
            
            services:
              backend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:${{ github.sha }}
                restart: unless-stopped
                env_file: .env.prod
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
              
              frontend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:${{ github.sha }}
                restart: unless-stopped
                depends_on:
                  - backend
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
            EOF
            
            # 拉取新鏡像並重啟服務
            docker-compose pull
            docker-compose up -d
            
            # 清理舊鏡像
            docker system prune -af --filter "until=24h"
      
      - name: 驗證部署
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd /opt/customer-messaging-platform
            
            # 等待服務啟動
            echo "等待服務啟動..."
            sleep 30
            
            # 檢查服務狀態
            echo "檢查服務狀態..."
            docker-compose ps
            
            # 檢查健康狀態
            echo "檢查健康狀態..."
            BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health)
            FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health)
            
            if [ "$BACKEND_HEALTH" == "200" ] && [ "$FRONTEND_HEALTH" == "200" ]; then
              echo "部署成功！所有服務運行正常。"
              exit 0
            else
              echo "部署失敗！健康檢查未通過。"
              echo "後端健康狀態: $BACKEND_HEALTH"
              echo "前端健康狀態: $FRONTEND_HEALTH"
              exit 1
            fi