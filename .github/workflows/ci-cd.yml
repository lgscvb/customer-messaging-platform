name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 後端測試和構建
  backend:
    runs-on: ubuntu-latest
    
    services:
      # 設置 PostgreSQL 服務
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customer_messaging_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 設置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: 安裝後端依賴
        working-directory: ./backend
        run: npm ci
      
      - name: 修復 LangChain 依賴問題
        working-directory: ./backend
        run: |
          if [ -f ./scripts/fix-langchain-dependency.js ]; then
            node ./scripts/fix-langchain-dependency.js
          fi
      
      - name: 運行後端測試
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: customer_messaging_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test_jwt_secret_key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: 構建後端
        working-directory: ./backend
        run: npm run build
      
      - name: 上傳後端構建產物
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist
  
  # 前端測試和構建
  frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 設置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安裝前端依賴
        working-directory: ./frontend
        run: npm ci
      
      - name: 運行前端測試
        working-directory: ./frontend
        run: npm test
      
      - name: 構建前端
        working-directory: ./frontend
        run: npm run build
      
      - name: 上傳前端構建產物
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
  
  # 部署到開發環境（僅在 develop 分支）
  deploy-dev:
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 下載後端構建產物
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist
      
      - name: 下載前端構建產物
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
      
      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 登錄到 Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: 構建並推送後端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:dev
      
      - name: 構建並推送前端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:dev
      
      - name: 部署到開發環境
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            cd /opt/customer-messaging-platform
            docker-compose pull
            docker-compose up -d
            docker system prune -f
  
  # 部署到生產環境（僅在 main 分支）
  deploy-prod:
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
      
      - name: 下載後端構建產物
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist
      
      - name: 下載前端構建產物
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
      
      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 登錄到 Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: 構建並推送後端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-backend:${{ github.sha }}
      
      - name: 構建並推送前端 Docker 鏡像
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-messaging-frontend:${{ github.sha }}
      
      - name: 部署到生產環境
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd /opt/customer-messaging-platform
            docker-compose pull
            docker-compose up -d
            docker system prune -f